from collections.abc import Iterator
from typing import Any

from sqlalchemy import String, cast, desc
from sqlalchemy.orm.attributes import InstrumentedAttribute
from sqlalchemy.types import TypeDecorator
from sqlmodel import Enum, func
from sqlmodel.sql.expression import col
from sqlmodel.sql.sqltypes import GUID

from worker_safety_service.models.audit_events import (
    AuditDiffType,
    AuditEvent,
    AuditEventDiff,
    AuditEventType,
    AuditObjectType,
)
from worker_safety_service.models.base import (
    Activity,
    ActivityBase,
    ActivityCreate,
    ActivityEdit,
    ActivityStatus,
    ActivitySupervisorLink,
    ActivityTaskCreate,
    AddActivityTasks,
    ApplicabilityLevel,
    BaseControl,
    BaseHazard,
    BaseHazardControlCreate,
    BaseHazardControlEdit,
    BaseHazardCreate,
    BaseHazardEdit,
    CreateFirstAidAEDLocationsInput,
    DictModel,
    FirstAidAedLocations,
    LibraryTaskLibraryHazardLink,
    Location,
    LocationClusteringModel,
    LocationCreate,
    LocationEdit,
    LocationType,
    RemoveActivityTasks,
    RiskLevel,
    SiteCondition,
    SiteConditionControl,
    SiteConditionCreate,
    SiteConditionHazard,
    SQLModel,
    Task,
    TaskBase,
    TaskControl,
    TaskCreate,
    TaskHazard,
    TaskStatus,
    UpdateFirstAidAEDLocationsInput,
)
from worker_safety_service.models.concepts import (
    EWP,
    ActivityConcept,
    AEDInformation,
    AEDInformationData,
    Attachments,
    BarnLocation,
    BurnKitLocation,
    ClearanceTypes,
    Completion,
    ControlAssessment,
    ControlsConcept,
    ControlSelection,
    CrewInfo,
    CrewInformation,
    CrewInformationData,
    CrewInformationTypes,
    CrewSignOff,
    CriticalRiskArea,
    CriticalTasksSelection,
    CustomHazards,
    CustomMedicalFacility,
    DailySourceInformationConcepts,
    DepartmentObservedConcept,
    DocumentsProvided,
    EBOActivityConcept,
    EBOControlsConcept,
    EBOHazardObservationConcept,
    EBOHighEnergyTaskConcept,
    EBOSummary,
    EBOTaskSelectionConcept,
    EmergencyContact,
    EnergyBasedObservationLayout,
    EnergyControlInfo,
    EnergyControls,
    EnergyHazards,
    EnergySourceControl,
    EWPEquipmentInformation,
    EWPMetadata,
    FirstAidLocation,
    FormStatus,
    GeneralReferenceMaterial,
    GPSCoordinates,
    GroupDiscussion,
    GroupDiscussionInformation,
    HazardObservationConcept,
    HazardsControls,
    HighEnergyTaskConcept,
    HighLowEnergyHazards,
    JobSafetyBriefingLayout,
    JSBMetadata,
    Layout,
    LocationInformation,
    LocationInformationV2,
    MedicalFacility,
    MedicalInformation,
    MininimumApproachDistance,
    MultipleCrews,
    NatGridEnergySourceControl,
    NatGridJobSafetyBriefingLayout,
    NatGridSiteCondition,
    NatGridTaskHistoricIncident,
    ObservationDetailsConcept,
    OpCoObservedConcept,
    OperatingProcedure,
    PersonnelConcept,
    PointsOfProtection,
    PostJobBrief,
    PostJobBriefDiscussion,
    PrimaryFireSupressionLocation,
    RecommendedTaskSelection,
    SiteConditionSelection,
    SourceAppInformation,
    SourceInformationConcepts,
    SupervisorSignOff,
    TaskSelectionConcept,
    TaskSiteConditonEnergyHazards,
    TaskStandardOperatingProcedure,
    UserInfo,
    Voltage,
    VoltageInformation,
    VoltageInformationFromConfig,
    VoltageInformationV2,
    VoltageType,
    WorkLocation,
    WorkPackageMetadata,
    WorkProcedureSelection,
    WorkTypeConcept,
)
from worker_safety_service.models.configurations import Configuration
from worker_safety_service.models.consumer_models import (
    Contractor,
    ContractorAlias,
    Crew,
    Incident,
    IncidentSeverityEnum,
    IncidentTask,
    IngestionSettings,
    Observation,
    ParsedFile,
    Supervisor,
)
from worker_safety_service.models.crew_leader import (
    CreateCrewLeaderInput,
    CrewLeader,
    UpdateCrewLeaderInput,
)
from worker_safety_service.models.daily_reports import (
    DailyReport,
    DailyReportAdditionalInformationSection,
    DailyReportAttachmentSection,
    DailyReportControlAnalysis,
    DailyReportCrewSection,
    DailyReportHazardAnalysis,
    DailyReportJobHazardAnalysisSection,
    DailyReportSections,
    DailyReportSiteConditionAnalysis,
    DailyReportTaskAnalysis,
    DailyReportTaskSelection,
    DailyReportTaskSelectionSection,
    DailyReportWorkSchedule,
)
from worker_safety_service.models.data_source import DataSource, DataSourceCreate
from worker_safety_service.models.department import (
    Department,
    DepartmentCreate,
    DepartmentDelete,
)
from worker_safety_service.models.feature_flag import (
    FeatureFlag,
    FeatureFlagAttributesBase,
    FeatureFlagCreateInput,
    FeatureFlagUpdateInput,
)
from worker_safety_service.models.feature_flag_log import (
    FeatureFlagLog,
    FeatureFlagLogType,
)
from worker_safety_service.models.forms import (
    EnergyBasedObservation,
    FormBase,
    FormDefinition,
    FormDefinitionStatus,
    FormType,
    JobSafetyBriefing,
    JSBFiltersOnEnum,
    NatGridJobSafetyBriefing,
    SourceInformation,
    UIConfig,
)
from worker_safety_service.models.google_cloud_storage import (
    File,
    FileCategory,
    GoogleCloudStorageBlob,
    SignedPostPolicy,
)
from worker_safety_service.models.incident_severity_list import (
    IncidentSeverity,
    IncidentSeverityCreate,
)
from worker_safety_service.models.ingest import (
    CompatibleUnit,
    Element,
    ElementLibraryTaskLink,
    HydroOneJobTypeTaskMap,
    IngestionProcess,
    WorkPackageCompatibleUnitLink,
)
from worker_safety_service.models.insight import (
    CreateInsightInput,
    Insight,
    UpdateInsightInput,
)
from worker_safety_service.models.library import (
    CreateCoreWorkTypeInput,
    CreateTenantWorkTypeInput,
    EnergyLevel,
    EnergyType,
    LibraryActivityGroup,
    LibraryActivityType,
    LibraryActivityTypeTenantLink,
    LibraryAssetType,
    LibraryControl,
    LibraryDivision,
    LibraryDivisionTenantLink,
    LibraryHazard,
    LibraryProjectType,
    LibraryRegion,
    LibraryRegionTenantLink,
    LibrarySiteCondition,
    LibrarySiteConditionRecommendations,
    LibraryTask,
    LibraryTaskActivityGroup,
    LibraryTaskRecommendations,
    LocationHazardControlSettings,
    LocationHazardControlSettingsCreate,
    UpdateCoreWorkTypeInput,
    UpdateTenantWorkTypeInput,
    WorkType,
    WorkTypeLibrarySiteConditionLink,
    WorkTypeTaskLink,
)
from worker_safety_service.models.notifications import (
    CreateDeviceDetailsInput,
    CreateNotificationsInput,
    DeviceType,
    Notifications,
    NotificationStatus,
    NotificationType,
    NotificationUserDetails,
)
from worker_safety_service.models.opco import Opco, OpcoCreate, OpcoDelete
from worker_safety_service.models.risk_model import (
    AverageContractorSafetyScoreModel,
    AverageCrewRiskModel,
    AverageSupervisorEngagementFactorModel,
    AverageSupervisorRelativePrecursorRiskModel,
    ContractorProjectExecutionModel,
    ContractorSafetyHistoryModel,
    ContractorSafetyRatingModel,
    ContractorSafetyScoreModel,
    CrewRiskModel,
    GblContractorProjectHistoryBaselineModel,
    GblContractorProjectHistoryBaselineModelStdDev,
    ProjectLocationSiteConditionsMultiplierModel,
    ProjectLocationTotalTaskRiskScoreModel,
    ProjectSafetyClimateMultiplierModel,
    ProjectTotalTaskRiskScoreModel,
    RiskModelBase,
    RiskModelParameters,
    StdDevContractorSafetyScoreModel,
    StdDevCrewRiskModel,
    StdDevSupervisorEngagementFactorModel,
    StdDevSupervisorRelativePrecursorRiskModel,
    SupervisorEngagementFactorModel,
    SupervisorRelativePrecursorRiskModel,
    TaskSpecificRiskScoreModel,
    TaskSpecificSafetyClimateMultiplierModel,
    TaskSpecificSiteConditionsMultiplierModel,
    TotalProjectLocationRiskScoreModel,
    TotalProjectRiskScoreModel,
)
from worker_safety_service.models.standard_operating_procedures import (
    LibraryTaskStandardOperatingProcedure,
    StandardOperatingProcedure,
)
from worker_safety_service.models.tenant_library_settings import (
    CreateTenantLibraryBaseSettingInput,
    CreateTenantLibraryControlSettingInput,
    CreateTenantLibraryHazardSettingInput,
    CreateTenantLibrarySiteConditionSettingInput,
    CreateTenantLibraryTaskSettingInput,
    TenantLibraryControlSettings,
    TenantLibraryHazardSettings,
    TenantLibrarySiteConditionSettings,
    TenantLibraryTaskSettings,
    UpdateTenantLibraryBaseSettingInput,
    UpdateTenantLibraryControlSettingInput,
    UpdateTenantLibraryHazardSettingInput,
    UpdateTenantLibrarySiteConditionSettingInput,
    UpdateTenantLibraryTaskSettingInput,
)
from worker_safety_service.models.tenants import (
    Tenant,
    TenantCreate,
    TenantEdit,
    WorkOS,
    WorkOSCreateInput,
    WorkOSUpdateInput,
)
from worker_safety_service.models.token_details import (
    TokenDetailsBase,
    TokenDetailsWithPermissions,
)
from worker_safety_service.models.user import User, UserCreate, UserEdit
from worker_safety_service.models.user_preference import (
    UserPreference,
    UserPreferenceEntityType,
)
from worker_safety_service.models.utils import (
    AsyncSession,
    get_engine,
    get_session,
    with_session,
)
from worker_safety_service.models.work_packages import (
    ProjectStatus,
    WorkPackage,
    WorkPackageCreate,
    WorkPackageEdit,
)
from worker_safety_service.models.work_type_settings import ActivityWorkTypeSettings
from worker_safety_service.types import LocationOrderByField, OrderBy, OrderByDirection
from worker_safety_service.urbint_logging import get_logger

logger = get_logger(__name__)
WorkPackageCreate.update_forward_refs(LocationCreate=LocationCreate)

__all__ = [
    "AsyncSession",
    "ActivityConcept",
    "get_engine",
    "get_session",
    "with_session",
    "SQLModel",
    "DictModel",
    "FilterByField",
    "Configuration",
    "LibraryTask",
    "LibrarySiteCondition",
    "LibraryHazard",
    "LibraryControl",
    "LibraryDivision",
    "LibraryDivisionTenantLink",
    "LibraryRegion",
    "LibraryRegionTenantLink",
    "LibraryProjectType",
    "LibraryAssetType",
    "LibraryTaskRecommendations",
    "HazardObservationConcept",
    "HighEnergyTaskConcept",
    "LibrarySiteConditionRecommendations",
    "LibraryActivityType",
    "LibraryActivityTypeTenantLink",
    "ProjectStatus",
    "WorkPackage",
    "WorkPackageCreate",
    "CreateNotificationsInput",
    "WorkPackageEdit",
    "NotificationUserDetails",
    "Location",
    "LocationCreate",
    "LocationEdit",
    "LocationClusteringModel",
    "Activity",
    "ActivityBase",
    "ActivityCreate",
    "ActivityEdit",
    "ActivityTaskCreate",
    "ActivityStatus",
    "ActivitySupervisorLink",
    "BaseHazard",
    "StatusWorkFlow",
    "BaseHazardCreate",
    "BaseHazardControlCreate",
    "BaseHazardControlEdit",
    "BaseHazardEdit",
    "BaseControl",
    "DataSource",
    "DataSourceCreate",
    "EnergyLevel",
    "EnergyType",
    "BurnKitLocation",
    "PrimaryFireSupressionLocation",
    "FormDefinition",
    "FormDefinitionStatus",
    "SiteCondition",
    "SiteConditionCreate",
    "SiteConditionHazard",
    "SiteConditionControl",
    "Task",
    "DeviceType",
    "CreateDeviceDetailsInput",
    "HazardsControls",
    "TaskSiteConditonEnergyHazards",
    "EnergyHazards",
    "NotificationType",
    "NotificationStatus",
    "Notifications",
    "HighLowEnergyHazards",
    "CustomHazards",
    "EnergyControls",
    "TaskBase",
    "TaskCreate",
    "TaskHazard",
    "TaskControl",
    "Tenant",
    "TenantCreate",
    "UIConfigLayoutInput",
    "TenantEdit",
    "LocationHazardControlSettings",
    "LocationHazardControlSettingsCreate",
    "Contractor",
    "ContractorAlias",
    "Supervisor",
    "Crew",
    "FormType",
    "UIConfig",
    "EnergyControlInfo",
    "DocumentsProvided",
    "UIConfigLayout",
    "Observation",
    "Incident",
    "IncidentSeverityEnum",
    "IncidentTask",
    "ParsedFile",
    "IngestionProcess",
    "IngestionSettings",
    "HydroOneJobTypeTaskMap",
    "TaskStatus",
    "RiskLevel",
    "GblContractorProjectHistoryBaselineModel",
    "GblContractorProjectHistoryBaselineModelStdDev",
    "ContractorSafetyHistoryModel",
    "RiskModelParameters",
    "User",
    "UserCreate",
    "UserEdit",
    "ContractorSafetyScoreModel",
    "AverageContractorSafetyScoreModel",
    "StdDevContractorSafetyScoreModel",
    "ContractorProjectExecutionModel",
    "DailyReport",
    "DailyReportSections",
    "DailyReportWorkSchedule",
    "DailyReportTaskSelectionSection",
    "DailyReportTaskSelection",
    "JobSafetyBriefingLayout",
    "EnergyBasedObservationLayout",
    "Layout",
    "JSBMetadata",
    "GPSCoordinates",
    "WorkLocation",
    "EmergencyContact",
    "WorkPackageMetadata",
    "WorkProcedureSelection",
    "MedicalFacility",
    "AEDInformation",
    "CriticalRiskArea",
    "VoltageType",
    "Voltage",
    "EWPEquipmentInformation",
    "EWPMetadata",
    "EWP",
    "EnergySourceControl",
    "PointsOfProtection",
    "SiteConditionSelection",
    "ControlSelection",
    "ControlAssessment",
    "RecommendedTaskSelection",
    "TaskSelectionConcept",
    "File",
    "FileCategory",
    "GoogleCloudStorageBlob",
    "SignedPostPolicy",
    "DailyReportControlAnalysis",
    "DailyReportHazardAnalysis",
    "DailyReportTaskAnalysis",
    "DailyReportSiteConditionAnalysis",
    "DailyReportJobHazardAnalysisSection",
    "DailyReportCrewSection",
    "DailyReportAdditionalInformationSection",
    "DailyReportAttachmentSection",
    "SupervisorEngagementFactorModel",
    "AverageSupervisorEngagementFactorModel",
    "StdDevSupervisorEngagementFactorModel",
    "SupervisorRelativePrecursorRiskModel",
    "AverageSupervisorRelativePrecursorRiskModel",
    "StdDevSupervisorRelativePrecursorRiskModel",
    "CrewRiskModel",
    "AverageCrewRiskModel",
    "StdDevCrewRiskModel",
    "AuditEvent",
    "AuditEventDiff",
    "AuditEventType",
    "AuditDiffType",
    "AuditObjectType",
    "ContractorSafetyRatingModel",
    "ProjectSafetyClimateMultiplierModel",
    "RiskModelBase",
    "TotalProjectLocationRiskScoreModel",
    "ProjectLocationSiteConditionsMultiplierModel",
    "TotalProjectRiskScoreModel",
    "TaskSpecificSafetyClimateMultiplierModel",
    "TaskSpecificSiteConditionsMultiplierModel",
    "ProjectLocationTotalTaskRiskScoreModel",
    "ProjectTotalTaskRiskScoreModel",
    "TaskSpecificRiskScoreModel",
    "unique_order_by_fields",
    "set_order_by",
    "set_item_order_by",
    "string_column_for_order_by",
    "LibraryTaskActivityGroup",
    "LibraryActivityGroup",
    "CompatibleUnit",
    "Element",
    "ElementLibraryTaskLink",
    "WorkPackageCompatibleUnitLink",
    "WorkType",
    "WorkTypeTaskLink",
    "JobSafetyBriefing",
    "FormStatus",
    "set_order_by_raw",
    "EnergyBasedObservation",
    "FormBase",
    "ObservationDetailsConcept",
    "PersonnelConcept",
    "ApplicabilityLevel",
    "LibraryTaskLibraryHazardLink",
    "CrewInformation",
    "Insight",
    "CreateInsightInput",
    "UpdateInsightInput",
    "WorkTypeConcept",
    "FeatureFlagCreateInput",
    "FeatureFlag",
    "FeatureFlagLog",
    "FeatureFlagLogType",
    "FeatureFlagUpdateInput",
    "CrewLeader",
    "CreateCrewLeaderInput",
    "UpdateCrewLeaderInput",
    "JSBFiltersOnEnum",
    "Opco",
    "OpcoCreate",
    "OpcoDelete",
    "Department",
    "DepartmentCreate",
    "DepartmentDelete",
    "FeatureFlagAttributesBase",
    "OpCoObservedConcept",
    "DepartmentObservedConcept",
    "IncidentSeverity",
    "IncidentSeverityCreate",
    "GroupDiscussion",
    "TokenDetailsBase",
    "TokenDetailsWithPermissions",
    "UserPreference",
    "UserPreferenceEntityType",
    "CustomMedicalFacility",
    "AddActivityTasks",
    "RemoveActivityTasks",
    "ControlsConcept",
    "Completion",
    "EBOActivityConcept",
    "EBOHighEnergyTaskConcept",
    "EBOSummary",
    "EBOTaskSelectionConcept",
    "WorkTypeLibrarySiteConditionLink",
    "CreateCoreWorkTypeInput",
    "CreateTenantWorkTypeInput",
    "UpdateCoreWorkTypeInput",
    "UpdateTenantWorkTypeInput",
    "LocationInformation",
    "LocationInformationV2",
    "VoltageInformation",
    "VoltageInformationV2",
    "VoltageInformationFromConfig",
    "MininimumApproachDistance",
    "MedicalInformation",
    "FirstAidLocation",
    "AEDInformationData",
    "CriticalTasksSelection",
    "NatGridSiteCondition",
    "NatGridTaskHistoricIncident",
    "GeneralReferenceMaterial",
    "NatGridEnergySourceControl",
    "Attachments",
    "GroupDiscussionInformation",
    "CrewSignOff",
    "MultipleCrews",
    "UserInfo",
    "ClearanceTypes",
    "CrewInfo",
    "PostJobBrief",
    "PostJobBriefDiscussion",
    "SupervisorSignOff",
    "CrewInformationTypes",
    "CrewInformationData",
    "SourceAppInformation",
    "SourceInformation",
    "SourceInformationConcepts",
    "DailySourceInformationConcepts",
    "NatGridJobSafetyBriefing",
    "NatGridJobSafetyBriefingLayout",
    "CreateFirstAidAEDLocationsInput",
    "UpdateFirstAidAEDLocationsInput",
    "FirstAidAedLocations",
    "LocationType",
    "StandardOperatingProcedure",
    "TaskStandardOperatingProcedure",
    "OperatingProcedure",
    "LibraryTaskStandardOperatingProcedure",
    "LocationOrderByField",
    "TenantLibraryTaskSettings",
    "CreateTenantLibraryTaskSettingInput",
    "UpdateTenantLibraryTaskSettingInput",
    "CreateTenantLibraryBaseSettingInput",
    "UpdateTenantLibraryBaseSettingInput",
    "TenantLibraryHazardSettings",
    "CreateTenantLibraryHazardSettingInput",
    "UpdateTenantLibraryHazardSettingInput",
    "TenantLibraryControlSettings",
    "CreateTenantLibraryControlSettingInput",
    "UpdateTenantLibraryControlSettingInput",
    "EBOControlsConcept",
    "EBOHazardObservationConcept",
    "TenantLibrarySiteConditionSettings",
    "CreateTenantLibrarySiteConditionSettingInput",
    "UpdateTenantLibrarySiteConditionSettingInput",
    "WorkOS",
    "WorkOSCreateInput",
    "WorkOSUpdateInput",
    "WorkTypeTenantLink",
    "BarnLocation",
    "ActivityWorkTypeSettings",
]


def unique_order_by_fields(
    order_by: list[OrderBy] | None = None,
) -> Iterator[OrderBy]:
    if order_by:
        applied_fields = set()
        for order_by_item in order_by:
            if order_by_item.field not in applied_fields:
                applied_fields.add(order_by_item.field)
                yield order_by_item


def set_order_by(
    table: Any, statement: Any, order_by: list[OrderBy] | None = None
) -> Any:
    for order_by_item in unique_order_by_fields(order_by):
        statement = set_item_order_by(statement, table, order_by_item)
    return statement


# When using UNION we are not able to supply a single table column. This function creates a way to use ordering by
# applying column name as string directly.
def set_order_by_raw(statement: Any, order_by: list[OrderBy] | None = None) -> Any:
    for order_by_item in unique_order_by_fields(order_by):
        field = (
            desc(order_by_item.field)
            if order_by_item.direction == OrderByDirection.DESC
            else order_by_item.field
        )
        statement = statement.order_by(field)
    return statement


def set_item_order_by(statement: Any, table: Any, order_by: OrderBy) -> Any:
    column: InstrumentedAttribute | None = getattr(table, order_by.field, None)
    if not column:
        logger.critical("Invalid field for order by", field=order_by.field, table=table)
        return statement
    else:
        if order_by.custom_order_by:
            return order_by.custom_order_by(statement, column, order_by.direction)
        return set_column_order_by(statement, column, order_by.direction)


def set_column_order_by(
    statement: Any, column: Any, direction: OrderByDirection
) -> Any:
    sql_column: Any = col(column)
    column_type = sql_column.property.columns[0].type
    if not isinstance(column_type, GUID):
        if isinstance(column_type, TypeDecorator):
            column_type = column_type.impl

        if isinstance(column_type, Enum):
            sql_column = func.lower(cast(sql_column, String))
        elif isinstance(column_type, String):
            sql_column = string_column_for_order_by(sql_column)

    if direction == OrderByDirection.DESC:
        sql_column = sql_column.desc()

    return statement.order_by(sql_column)


def string_column_for_order_by(column: Any) -> Any:
    # TODO what should be used to order as case insensitive and non-ascii?
    return func.lower(func.regexp_replace(column, "([^[:ascii:]])", "[\1]", "g"))
