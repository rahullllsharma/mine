"""migrate ids and name in ebo for controls,tasks

Revision ID: 492f53ae7731
Revises: 9251d3b606c8
Create Date: 2024-03-12 13:58:00.432940

"""

import json

import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision = "492f53ae7731"
down_revision = "9251d3b606c8"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    connection = op.get_bind()

    # get all controls
    controls_query = """
    SELECT id,name from public.library_controls where archived_at is null;
    """

    sql = sa.text(controls_query)
    rows = connection.execute(sql)

    id_to_controls_map = dict()
    for row in rows:
        id_to_controls_map[str(row.id)] = row.name

    # get all library tasks
    tasks_query = """
    SELECT id,name from public.library_tasks where archived_at is null;
    """

    sql = sa.text(tasks_query)
    rows = connection.execute(sql)

    tasks_id_map = dict()
    for row in rows:
        tasks_id_map[str(row.id)] = row.name

    # get all hazards

    hazards_query = """
    SELECT id,name from public.library_hazards where archived_at is null;
    """

    sql = sa.text(hazards_query)
    rows = connection.execute(sql)

    hazards_id_map = dict()
    for row in rows:
        hazards_id_map[str(row.id)] = row.name

    # get all EBOs

    ebo_query = """
    SELECT id,contents
    FROM public.energy_based_observations where contents is not null;
    """

    sql = sa.text(ebo_query)
    rows = connection.execute(sql)

    for row in rows:
        # populate task names under activities in EBO
        activities: list = row.contents.get("activities")
        if activities:
            for activity in activities:
                tasks = activity.get("tasks")
                if tasks:
                    for task in tasks:
                        if not task.get("name") and task.get("id"):
                            task_name = tasks_id_map.get(task.get("id"))
                            if task_name:
                                task["name"] = task_name

                        # populate hazard names under activities/tasks in EBO

                        hazards = task.get("hazards")
                        if hazards:
                            for hazard in hazards:
                                if not hazard.get("name") and hazard.get("id"):
                                    hazard_name = hazards_id_map.get(hazard.get("id"))
                                    if hazard_name:
                                        hazard["name"] = hazard_name

                                # populate control names in the hazards in activities/tasks in EBO

                                for control_type in [
                                    "limited_controls",
                                    "direct_controls",
                                ]:
                                    if hazard.get(control_type):
                                        processed_controls_list = []
                                        for control in hazard.get(control_type):
                                            if not isinstance(control, dict):
                                                control_name = id_to_controls_map.get(
                                                    control
                                                )
                                                processed_controls_list.append(
                                                    {
                                                        "id": str(control),
                                                        "name": control_name,
                                                    }
                                                )
                                        if len(processed_controls_list) > 0:
                                            hazard[
                                                control_type
                                            ] = processed_controls_list

                                if (
                                    hazard.get("indirect_controls")
                                    and len(hazard.get("indirect_controls")) > 0
                                ):
                                    if not isinstance(
                                        hazard.get("indirect_controls")[0], dict
                                    ):
                                        hazard["reason"] = hazard.get(
                                            "indirect_controls"
                                        )[0]
                                        hazard["indirect_controls"] = None
                            task["hazards"] = hazards
                    activity["tasks"] = tasks
            row.contents["activities"] = activities

        # populate task name under high energy tasks in ebo

        tasks: list = row.contents.get("high_energy_tasks")
        if tasks:
            for task in tasks:
                if not task.get("name") and task.get("id"):
                    task_name = tasks_id_map.get(task.get("id"))
                    if task_name:
                        task["name"] = task_name

                # populate hazard names under high energy tasks in EBO

                hazards = task.get("hazards")
                if hazards:
                    for hazard in hazards:
                        if not hazard.get("name") and hazard.get("id"):
                            hazard_name = hazards_id_map.get(hazard.get("id"))
                            if hazard_name:
                                hazard["name"] = hazard_name

                        # populate control names in the hazards in high energy tasks EBO

                        for control_type in ["limited_controls", "direct_controls"]:
                            if hazard.get(control_type):
                                processed_controls_list = []
                                for control in hazard.get(control_type):
                                    if not isinstance(control, dict):
                                        control_name = id_to_controls_map.get(control)
                                        processed_controls_list.append(
                                            {"id": str(control), "name": control_name}
                                        )
                                if len(processed_controls_list) > 0:
                                    hazard[control_type] = processed_controls_list

                        if (
                            hazard.get("indirect_controls")
                            and len(hazard.get("indirect_controls")) > 0
                        ):
                            if not isinstance(hazard.get("indirect_controls")[0], dict):
                                hazard["reason"] = hazard.get("indirect_controls")[0]
                                hazard["indirect_controls"] = None
                    task["hazards"] = hazards
            row.contents["high_energy_tasks"] = tasks

        contents = json.dumps(row.contents)
        connection.execute(
            sa.text(
                "UPDATE public.energy_based_observations SET contents=:contents where id=:id"
            ),
            {"id": row.id, "contents": contents},
        )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # ### end Alembic commands ###
    # no downgrade function because data once updated cannot be reverted back as we are not keeping track of which
    # records were updated due to this migration
    pass
