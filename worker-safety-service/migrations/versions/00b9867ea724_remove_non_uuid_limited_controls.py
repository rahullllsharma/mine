"""remove non-uuid limited controls

Revision ID: 00b9867ea724
Revises: 492f53ae7731
Create Date: 2024-03-16 12:15:56.301983

"""

import json
import uuid

import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision = "00b9867ea724"
down_revision = "492f53ae7731"
branch_labels = None
depends_on = None


def is_valid_uuid(s: str) -> bool:
    try:
        uuid_obj = uuid.UUID(s)
        return str(uuid_obj) == s
    except ValueError:
        return False


def upgrade():
    connection = op.get_bind()
    # get all EBOs

    ebo_query = """
    SELECT id,contents
    FROM public.energy_based_observations where contents is not null;
    """

    sql = sa.text(ebo_query)
    rows = connection.execute(sql)

    for row in rows:
        # fix limited controls data type under activities->tasks->hazards
        activities: list = row.contents.get("activities")
        if activities:
            for activity in activities:
                tasks = activity.get("tasks")
                if tasks:
                    for task in tasks:
                        hazards = task.get("hazards")
                        if hazards:
                            for hazard in hazards:
                                limited_controls = hazard.get("limited_controls")
                                if limited_controls:
                                    i = 0
                                    controls_length = len(limited_controls)
                                    while i < controls_length:
                                        if isinstance(limited_controls[i], dict):
                                            control_id = limited_controls[i].get("id")
                                            if control_id and not is_valid_uuid(
                                                control_id
                                            ):
                                                del limited_controls[i]
                                                i = i - 1
                                        i = i + 1
                                        controls_length = len(limited_controls)
                                    hazard["limited_controls"] = limited_controls
                            task["hazards"] = hazards
                    activity["tasks"] = tasks
            row.contents["activities"] = activities

        # fix limited controls data type under high_energy_tasks->hazards

        tasks: list = row.contents.get("high_energy_tasks")
        if tasks:
            for task in tasks:
                hazards = task.get("hazards")
                if hazards:
                    for hazard in hazards:
                        limited_controls = hazard.get("limited_controls")
                        if limited_controls:
                            i = 0
                            controls_length = len(limited_controls)
                            while i < controls_length:
                                if isinstance(limited_controls[i], dict):
                                    control_id = limited_controls[i].get("id")
                                    if control_id and not is_valid_uuid(control_id):
                                        del limited_controls[i]
                                        i = i - 1
                                i = i + 1
                                controls_length = len(limited_controls)
                            hazard["limited_controls"] = limited_controls
                    task["hazards"] = hazards
            row.contents["high_energy_tasks"] = tasks

        contents = json.dumps(row.contents)
        connection.execute(
            sa.text(
                "UPDATE public.energy_based_observations SET contents=:contents where id=:id"
            ),
            {"id": row.id, "contents": contents},
        )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # ### end Alembic commands ###
    pass
