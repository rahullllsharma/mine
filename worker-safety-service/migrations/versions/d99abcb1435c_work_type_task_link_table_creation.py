"""work type task link table creation

Revision ID: d99abcb1435c
Revises: 75e824f9bdad
Create Date: 2023-11-15 16:05:36.646701

"""
import sqlalchemy as sa
import sqlmodel
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "d99abcb1435c"
down_revision = "75e824f9bdad"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "work_type_task_link",
        sa.Column("task_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("work_type_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["task_id"],
            ["library_tasks.id"],
        ),
        sa.ForeignKeyConstraint(
            ["work_type_id"],
            ["work_types.id"],
        ),
        sa.PrimaryKeyConstraint("task_id", "work_type_id"),
    )
    op.alter_column(
        "library_tasks", "work_type_id", existing_type=postgresql.UUID(), nullable=True
    )

    connection = op.get_bind()
    query = """
    SELECT id, work_type_id
    FROM public.library_tasks;
    """

    sql = sa.text(query)
    rows = connection.execute(sql)

    for row in rows:
        connection.execute(
            sa.text(
                "INSERT into public.work_type_task_link (task_id,work_type_id) values (:task_id,:work_type_id)"
            ),
            {"task_id": row.id, "work_type_id": row.work_type_id},
        )

    op.drop_constraint(
        "library_tasks_work_type_id_fkey", "library_tasks", type_="foreignkey"
    )
    op.drop_index("library_tasks_work_type_id_ix", table_name="library_tasks")
    op.drop_column("library_tasks", "work_type_id")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "library_tasks",
        sa.Column(
            "work_type_id", postgresql.UUID(), autoincrement=False, nullable=True
        ),
    )
    op.create_index(
        "library_tasks_work_type_id_ix", "library_tasks", ["work_type_id"], unique=False
    )
    op.create_foreign_key(
        "library_tasks_work_type_id_fkey",
        "library_tasks",
        "work_types",
        ["work_type_id"],
        ["id"],
    )

    # populating work_type_id field in library tasks

    query = "SELECT task_id,work_type_id FROM public.work_type_task_link;"
    connection = op.get_bind()
    sql = sa.text(query)
    rows = connection.execute(sql)

    for row in rows:
        connection.execute(
            sa.text(
                "UPDATE public.library_tasks set work_type_id=:work_type_id where id=:task_id"
            ),
            {"task_id": row.task_id, "work_type_id": row.work_type_id},
        )
    op.alter_column(
        "library_tasks", "work_type_id", existing_type=postgresql.UUID(), nullable=False
    )
    op.drop_table("work_type_task_link")
    # ### end Alembic commands ###
