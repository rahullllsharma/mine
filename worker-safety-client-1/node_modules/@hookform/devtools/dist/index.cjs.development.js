'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var littleStateMachine = require('little-state-machine');
var reactHookForm = require('react-hook-form');
var reactSimpleAnimate = require('react-simple-animate');
var styled = require('@emotion/styled');
var isUndefined = require('lodash/isUndefined');
var isObject = require('lodash/isObject');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () {
                        return e[k];
                    }
                });
            }
        });
    }
    n['default'] = e;
    return Object.freeze(n);
}

var React__namespace = /*#__PURE__*/_interopNamespace(React);
var styled__default = /*#__PURE__*/_interopDefaultLegacy(styled);
var isUndefined__default = /*#__PURE__*/_interopDefaultLegacy(isUndefined);
var isObject__default = /*#__PURE__*/_interopDefaultLegacy(isObject);

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
}

var colors = {
    primary: '#0e101c',
    secondary: '#bf1650',
    lightBlue: '#516391',
    blue: '#1e2a4a',
    lightPink: '#ec5990',
    errorPink: '#fbecf2',
    buttonBlue: '#191d3a',
    link: '#ff7aa8',
    green: '#1bda2b',
};

var paraGraphDefaultStyle = {
    fontSize: 13,
    lineHeight: '20px',
};
var Button = styled__default['default'].button(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  appearance: none;\n  margin: 0;\n  border: 0;\n  color: white;\n  padding: 5px !important;\n  border-radius: 0 !important;\n  background: ", ";\n  transition: 0.2s all;\n\n  &:hover {\n    background: ", ";\n  }\n"], ["\n  appearance: none;\n  margin: 0;\n  border: 0;\n  color: white;\n  padding: 5px !important;\n  border-radius: 0 !important;\n  background: ",
    ";\n  transition: 0.2s all;\n\n  &:hover {\n    background: ", ";\n  }\n"])), function (props) {
    return props.hideBackground ? "" : colors.blue + " !important";
}, colors.lightBlue);
Button.defaultProps = { type: 'button' };
var CircleButton = styled__default['default'](Button)(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n  font-size: 14px;\n  font-weight: bold;\n  margin: 0 4px 0 auto;\n  background: none !important;\n  display: flex;\n  width: 25px;\n  height: 25px;\n  justify-content: center;\n  line-height: 14px !important;\n  border-radius: 50% !important;\n  padding: 0 !important;\n  transition: 0.2s all;\n\n  &:hover {\n    background: ", ";\n  }\n\n  &:active {\n    background: black;\n  }\n"], ["\n  font-size: 14px;\n  font-weight: bold;\n  margin: 0 4px 0 auto;\n  background: none !important;\n  display: flex;\n  width: 25px;\n  height: 25px;\n  justify-content: center;\n  line-height: 14px !important;\n  border-radius: 50% !important;\n  padding: 0 !important;\n  transition: 0.2s all;\n\n  &:hover {\n    background: ", ";\n  }\n\n  &:active {\n    background: black;\n  }\n"])), colors.lightBlue);
var Input = styled__default['default'].input(templateObject_3 || (templateObject_3 = __makeTemplateObject(["\n  &::placeholder {\n    color: #b3b3b3;\n  }\n\n  &:focus::placeholder {\n    color: white;\n  }\n"], ["\n  &::placeholder {\n    color: #b3b3b3;\n  }\n\n  &:focus::placeholder {\n    color: white;\n  }\n"])));
var Table = styled__default['default'].table(templateObject_4 || (templateObject_4 = __makeTemplateObject(["\n  transition: 0.3s all;\n\n  &:hover {\n    background: ", ";\n  }\n"], ["\n  transition: 0.3s all;\n\n  &:hover {\n    background: ", ";\n  }\n"])), colors.primary);
var templateObject_1, templateObject_2, templateObject_3, templateObject_4;

var Header = function (_a) {
    var setVisible = _a.setVisible, control = _a.control;
    var isValid = reactHookForm.useFormState({
        control: control,
    }).isValid;
    return (React__namespace.createElement("header", { style: {
            display: 'flex',
            alignItems: 'center',
            paddingLeft: 10,
            backgroundColor: 'transparent',
        } },
        React__namespace.createElement("p", { style: __assign(__assign({}, paraGraphDefaultStyle), { margin: 0, padding: 0, fontWeight: 400, fontSize: 12 }) },
            React__namespace.createElement("span", { style: {
                    transition: '0.5s all',
                    color: isValid ? colors.green : colors.lightPink,
                } }, "\u25A0"),
            ' ',
            "React Hook Form"),
        React__namespace.createElement(CircleButton, { title: "Close dev panel", onClick: function () { return setVisible(false); } }, "\u2715")));
};

var PanelTable = function (_a) {
    var refObject = _a.refObject, hasError = _a.hasError, isDirty = _a.isDirty, fieldsValues = _a.fieldsValues, isNative = _a.isNative, errorMessage = _a.errorMessage, errorType = _a.errorType, type = _a.type, isTouched = _a.isTouched, name = _a.name, collapseAll = _a.collapseAll;
    var _b = React__namespace.useState(false), collapse = _b[0], setCollapse = _b[1];
    React__namespace.useEffect(function () {
        setCollapse(!collapseAll);
    }, [collapseAll]);
    var value = fieldsValues ? reactHookForm.get(fieldsValues, name) : '';
    var isValueWrappedInPre = false;
    if (!isUndefined__default['default'](value)) {
        if (isObject__default['default'](value)) {
            try {
                value = (React__namespace.createElement("pre", { style: { margin: 0 } },
                    React__namespace.createElement("code", { style: { fontSize: 12 } }, JSON.stringify(value, null, 2))));
                isValueWrappedInPre = true;
            }
            catch (_c) {
                value = React__namespace.createElement("span", null, "[Nested Object]");
            }
        }
        else if (typeof value !== 'string') {
            value = String(value);
        }
    }
    return (React__namespace.createElement(Table, { style: {
            padding: '5px 8px',
            width: '100%',
            transition: '.3s all',
            borderLeft: "2px solid " + (hasError ? colors.secondary : colors.buttonBlue),
            background: 'none',
        } },
        React__namespace.createElement("thead", null,
            React__namespace.createElement("tr", null,
                React__namespace.createElement("td", { valign: "top", style: { width: 85, lineHeight: '22px' } },
                    React__namespace.createElement(Button, { onClick: function () { return setCollapse(!collapse); }, title: "Toggle field table", style: {
                            border: "1px solid " + colors.lightBlue,
                            borderRadius: 2,
                            padding: '3px 5px',
                            display: 'inline-block',
                            fontSize: 9,
                            lineHeight: '13px',
                            width: 20,
                            textAlign: 'center',
                            marginRight: 8,
                        } }, collapse ? '+' : '-'),
                    React__namespace.createElement(Button, { onClick: function () {
                            if (refObject.scrollIntoView) {
                                refObject.scrollIntoView({ behavior: 'smooth' });
                            }
                        }, title: "Scroll into view", style: __assign({ border: "1px solid " + colors.lightBlue, borderRadius: 2, padding: '3px 5px', display: 'inline-block', fontSize: 9, lineHeight: '13px', textAlign: 'center', width: 'calc(100% - 30px)' }, (isNative
                            ? {}
                            : { cursor: 'not-allowed', background: colors.lightBlue })) }, isNative ? 'Native' : 'Custom')),
                React__namespace.createElement("td", { style: {
                        display: 'block',
                        maxWidth: 140,
                    } },
                    React__namespace.createElement("p", { style: __assign(__assign({ margin: 0, padding: 0, top: 0, position: 'relative', whiteSpace: 'nowrap', overflow: 'hidden', textOverflow: 'ellipsis' }, paraGraphDefaultStyle), { lineHeight: '24px' }), title: name }, name)))),
        !collapse && (React__namespace.createElement("tbody", null,
            type && (React__namespace.createElement("tr", null,
                React__namespace.createElement("td", { align: "right", style: __assign({ paddingRight: 5, fontWeight: 500, verticalAlign: 'top' }, paraGraphDefaultStyle) }, "Type:"),
                React__namespace.createElement("td", { style: __assign({ display: 'block', maxWidth: 100 }, paraGraphDefaultStyle) }, type))),
            errorType && (React__namespace.createElement("tr", null,
                React__namespace.createElement("td", { align: "right", style: __assign({ paddingRight: 5, fontWeight: 500, verticalAlign: 'top' }, paraGraphDefaultStyle) }, "ERROR Type:"),
                React__namespace.createElement("td", { style: __assign({ display: 'block', maxWidth: 100 }, paraGraphDefaultStyle) }, errorType))),
            errorMessage && (React__namespace.createElement("tr", null,
                React__namespace.createElement("td", { align: "right", style: __assign({ paddingRight: 5, fontWeight: 500, verticalAlign: 'top' }, paraGraphDefaultStyle) }, "MESSAGE:"),
                React__namespace.createElement("td", { style: __assign({ display: 'block', maxWidth: 100 }, paraGraphDefaultStyle) }, errorMessage.trim()))),
            !isUndefined__default['default'](value) && (React__namespace.createElement("tr", null,
                React__namespace.createElement("td", { align: "right", style: __assign({ paddingRight: 5, fontWeight: 500, verticalAlign: 'top' }, paraGraphDefaultStyle) }, "Value:"),
                React__namespace.createElement("td", { "data-testid": name + "-field-value", style: __assign({ display: 'block', maxWidth: 100 }, paraGraphDefaultStyle) },
                    !isValueWrappedInPre && (React__namespace.createElement("p", { title: value, style: __assign(__assign({}, paraGraphDefaultStyle), { margin: 0, padding: 0 }) }, value)),
                    isValueWrappedInPre && (React__namespace.createElement("div", { style: __assign(__assign({}, paraGraphDefaultStyle), { margin: 0, padding: 0 }) }, value))))),
            React__namespace.createElement("tr", null,
                React__namespace.createElement("td", { align: "right", style: __assign({ paddingRight: 5, fontWeight: 500, verticalAlign: 'top' }, paraGraphDefaultStyle) }, "Touched:"),
                React__namespace.createElement("td", null,
                    React__namespace.createElement("code", { style: __assign(__assign({ color: isTouched ? colors.green : colors.lightPink }, paraGraphDefaultStyle), { fontSize: 12 }) }, isTouched ? 'true' : 'false'))),
            React__namespace.createElement("tr", null,
                React__namespace.createElement("td", { align: "right", style: __assign({ paddingRight: 5, fontWeight: 500, verticalAlign: 'top' }, paraGraphDefaultStyle) }, "Dirty:"),
                React__namespace.createElement("td", null,
                    React__namespace.createElement("code", { style: __assign(__assign({ color: isDirty ? colors.green : colors.lightPink }, paraGraphDefaultStyle), { fontSize: 12 }) }, isDirty ? 'true' : 'false')))))));
};

var FormStateTable = function (_a) {
    var formState = _a.formState, showFormState = _a.showFormState, setShowFormState = _a.setShowFormState;
    return (React__namespace.createElement("div", { style: {
            alignSelf: 'end',
        } },
        React__namespace.createElement(reactSimpleAnimate.Animate, { play: showFormState, start: { opacity: 0 }, end: { opacity: 1 }, render: function (_a) {
                var style = _a.style;
                return (React__namespace.createElement("table", { style: __assign({ padding: '5px 10px', display: 'block', background: 'black', borderTop: "1px solid " + colors.lightPink, pointerEvents: 'none' }, style) },
                    React__namespace.createElement("tbody", null,
                        React__namespace.createElement("tr", null,
                            React__namespace.createElement("td", { align: "right", style: __assign({ width: 90 }, paraGraphDefaultStyle) }, "Valid:"),
                            React__namespace.createElement("td", { style: __assign({ color: formState.isValid ? colors.green : colors.lightPink }, paraGraphDefaultStyle) }, formState.isValid ? 'true' : 'false')),
                        React__namespace.createElement("tr", null,
                            React__namespace.createElement("td", { align: "right", style: __assign({}, paraGraphDefaultStyle) }, "Submitted:"),
                            React__namespace.createElement("td", { style: __assign({ color: formState.isSubmitted
                                        ? colors.green
                                        : colors.lightPink }, paraGraphDefaultStyle) }, formState.isSubmitted ? 'true' : 'false')),
                        React__namespace.createElement("tr", null,
                            React__namespace.createElement("td", { align: "right", style: __assign({}, paraGraphDefaultStyle) }, "Count:"),
                            React__namespace.createElement("td", { style: __assign({ color: formState.submitCount
                                        ? colors.green
                                        : colors.lightPink }, paraGraphDefaultStyle) }, formState.submitCount)),
                        React__namespace.createElement("tr", null,
                            React__namespace.createElement("td", { align: "right", style: __assign({}, paraGraphDefaultStyle) }, "Submitting:"),
                            React__namespace.createElement("td", { style: __assign({ color: formState.isSubmitting
                                        ? colors.green
                                        : colors.lightPink }, paraGraphDefaultStyle) }, formState.isSubmitting ? 'true' : 'false')))));
            } }),
        React__namespace.createElement(Button, { style: {
                margin: 0,
                width: '100%',
                padding: '8px 10px',
                textTransform: 'none',
                fontSize: 12,
                lineHeight: '14px',
            }, title: "Toggle form state panel", onClick: function () {
                setShowFormState(!showFormState);
            } },
            React__namespace.createElement("span", { style: {
                    transition: '0.5s all',
                    color: formState.isValid ? colors.green : colors.lightPink,
                } }, "\u25A0"),
            ' ',
            "Form State: ",
            showFormState ? 'OFF' : 'ON')));
};

function setVisible(state, payload) {
    return __assign(__assign({}, state), { visible: payload });
}
function setCollapse(state, payload) {
    return __assign(__assign({}, state), { isCollapse: payload });
}

var childIndex = 0;
function PanelChildren(_a) {
    var fields = _a.fields, searchTerm = _a.searchTerm, touchedFields = _a.touchedFields, errors = _a.errors, dirtyFields = _a.dirtyFields, state = _a.state, fieldsValues = _a.fieldsValues;
    return (React__namespace.createElement(React__namespace.Fragment, null, fields &&
        Object.entries(fields)
            .filter(function (_a) {
            var name = _a[0];
            return ((name &&
                name.toLowerCase &&
                name.toLowerCase().includes(searchTerm)) ||
                (!name && !searchTerm) ||
                searchTerm === '') &&
                name;
        })
            .map(function (_a, index) {
            var name = _a[0], value = _a[1];
            childIndex++;
            if (!(value === null || value === void 0 ? void 0 : value._f)) {
                return (React__namespace.createElement(PanelChildren, __assign({ key: name + childIndex }, {
                    fields: value,
                    searchTerm: searchTerm,
                    touchedFields: touchedFields,
                    errors: errors,
                    dirtyFields: dirtyFields,
                    state: state,
                    fieldsValues: fieldsValues,
                })));
            }
            else {
                var error = reactHookForm.get(errors, value._f.name);
                var errorMessage = reactHookForm.get(error, 'message', undefined);
                var errorType = reactHookForm.get(error, 'type', undefined);
                var type = reactHookForm.get(value, 'ref.type', undefined);
                var isTouched = !!reactHookForm.get(touchedFields, value._f.name);
                var isNative = !!(value && value._f.ref.type);
                var isDirty = !!reactHookForm.get(dirtyFields, value._f.name);
                var hasError = !!error;
                var ref = reactHookForm.get(value, '_f.ref');
                return (React__namespace.createElement("section", { key: (value === null || value === void 0 ? void 0 : value._f.name) + childIndex, style: {
                        borderBottom: "1px dashed " + colors.secondary,
                        margin: 0,
                    } },
                    React__namespace.createElement(PanelTable, { refObject: ref, index: index, collapseAll: state.isCollapse, name: value === null || value === void 0 ? void 0 : value._f.name, isTouched: isTouched, type: type, hasError: hasError, isNative: isNative, errorMessage: errorMessage, errorType: errorType, isDirty: isDirty, fieldsValues: fieldsValues })));
            }
        })));
}
var Panel = function (_a) {
    var control = _a.control, _fields = _a.control._fields;
    var formState = reactHookForm.useFormState({
        control: control,
    });
    var dirtyFields = formState.dirtyFields, touchedFields = formState.touchedFields, errors = formState.errors;
    formState.isDirty;
    var _b = littleStateMachine.useStateMachine({
        setCollapse: setCollapse,
    }), state = _b.state, actions = _b.actions;
    var _c = React__namespace.useState({}), setData = _c[1];
    var _d = React__namespace.useState(false), showFormState = _d[0], setShowFormState = _d[1];
    var fieldsValues = reactHookForm.useWatch({
        control: control,
    });
    var _e = reactHookForm.useForm(), register = _e.register, watch = _e.watch;
    var searchTerm = watch('search', '');
    React.useEffect(function () {
        setData({});
    }, []);
    return (React__namespace.createElement("div", { style: {
            display: 'grid',
            gridTemplateRows: '56px auto',
            height: 'calc(100vh - 40px)',
        } },
        React__namespace.createElement("div", { style: {
                display: 'grid',
                gridTemplateColumns: "1fr 1fr",
                gridTemplateRows: '28px 28px',
            } },
            React__namespace.createElement(Button, { style: {
                    borderRight: "1px solid " + colors.primary,
                    textTransform: 'none',
                    fontSize: 11,
                    lineHeight: 1,
                }, title: "Update values and state the form", onClick: function () { return setData({}); } }, "\u267A REFRESH"),
            React__namespace.createElement(Button, { style: {
                    borderRight: "1px solid " + colors.primary,
                    textTransform: 'none',
                    fontSize: 11,
                    lineHeight: 1,
                }, title: "Toggle entire fields", onClick: function () {
                    actions.setCollapse(!state.isCollapse);
                } }, state.isCollapse ? '[-] COLLAPSE' : '[+] EXPAND'),
            React__namespace.createElement(Input, __assign({ style: {
                    display: 'inline-block',
                    borderRadius: 0,
                    width: '100%',
                    margin: 0,
                    padding: '5px 10px',
                    WebkitAppearance: 'none',
                    appearance: 'none',
                    fontSize: 14,
                    border: 0,
                    color: 'white',
                    gridColumnStart: 1,
                    gridColumnEnd: 4,
                    background: 'black',
                } }, register('search'), { placeholder: "Filter name...", type: "search" }))),
        React__namespace.createElement("div", { style: {
                overflow: 'auto',
            } },
            React__namespace.createElement(PanelChildren, { fields: _fields, searchTerm: searchTerm, errors: errors, touchedFields: touchedFields, dirtyFields: dirtyFields, fieldsValues: fieldsValues, state: state })),
        React__namespace.createElement(FormStateTable, { formState: formState, showFormState: showFormState, setShowFormState: setShowFormState })));
};

var Logo = function (_a) {
    var style = _a.style, actions = _a.actions;
    return (React__namespace.createElement("svg", { fill: "white", viewBox: "0 0 100 100", style: __assign({ height: 14, padding: 3, borderRadius: 2, background: colors.lightPink }, style), onClick: function () {
            actions.setVisible(true);
        }, "aria-label": "React Hook Form Logo" },
        React__namespace.createElement("path", { d: "M73.56,13.32H58.14a8.54,8.54,0,0,0-16.27,0H26.44a11,11,0,0,0-11,11V81.63a11,11,0,0,0,11,11H73.56a11,11,0,0,0,11-11V24.32A11,11,0,0,0,73.56,13.32Zm-30.92,2a1,1,0,0,0,1-.79,6.54,6.54,0,0,1,12.78,0,1,1,0,0,0,1,.79h5.38v6.55a3,3,0,0,1-3,3H40.25a3,3,0,0,1-3-3V15.32ZM82.56,81.63a9,9,0,0,1-9,9H26.44a9,9,0,0,1-9-9V24.32a9,9,0,0,1,9-9h8.81v6.55a5,5,0,0,0,5,5h19.5a5,5,0,0,0,5-5V15.32h8.81a9,9,0,0,1,9,9Z" }),
        React__namespace.createElement("path", { style: { transform: 'translateX(-25px)' }, d: "M71.6,45.92H54a1,1,0,0,0,0,2H71.6a1,1,0,0,0,0-2Z" }),
        React__namespace.createElement("path", { d: "M71.6,45.92H54a1,1,0,0,0,0,2H71.6a1,1,0,0,0,0-2Z" }),
        React__namespace.createElement("path", { style: { transform: 'translateX(-25px)' }, d: "M71.1,69.49H53.45a1,1,0,1,0,0,2H71.1a1,1,0,0,0,0-2Z" }),
        React__namespace.createElement("path", { d: "M71.1,69.49H53.45a1,1,0,1,0,0,2H71.1a1,1,0,0,0,0-2Z" })));
};

function getPositionByPlacement(placement, defaultX, defaultY) {
    var _a;
    if (defaultX === void 0) { defaultX = 0; }
    if (defaultY === void 0) { defaultY = 0; }
    var _b = placement.split('-'), x = _b[0], y = _b[1];
    return _a = {},
        _a[x] = defaultX,
        _a[y] = defaultY,
        _a;
}

var DevToolUI = function (_a) {
    var control = _a.control, _b = _a.placement, placement = _b === void 0 ? 'top-right' : _b;
    var _c = littleStateMachine.useStateMachine({
        setVisible: setVisible,
    }), state = _c.state, actions = _c.actions;
    var position = getPositionByPlacement(placement, 0, 0);
    return (React__namespace.createElement(React__namespace.Fragment, null,
        React__namespace.createElement(reactSimpleAnimate.Animate, { play: state.visible, duration: 0.2, start: __assign(__assign({}, position), { position: 'fixed', transform: placement.includes('right')
                    ? 'translateX(280px)'
                    : 'translateX(-280px)', zIndex: 99999 }), end: __assign(__assign({}, position), { position: 'fixed', transform: 'translateX(0)', zIndex: 99999 }) },
            React__namespace.createElement("div", { style: __assign(__assign({}, position), { position: 'fixed', height: '100vh', width: 250, zIndex: 99999, background: colors.buttonBlue, display: 'grid', textAlign: 'left', color: 'white', fontSize: 14, gridTemplateRows: '40px auto', fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif" }) },
                React__namespace.createElement(Header, { setVisible: actions.setVisible, control: control }),
                React__namespace.createElement(Panel, { control: control }))),
        !state.visible && (React__namespace.createElement(Button, { title: "Show dev panel", hideBackground: true, style: __assign(__assign({ position: 'fixed', zIndex: 99999 }, getPositionByPlacement(placement, 3, 3)), { padding: 3, margin: 0, background: 'none' }) },
            React__namespace.createElement(Logo, { actions: actions })))));
};

if (typeof window !== 'undefined') {
    littleStateMachine.createStore({
        visible: true,
        isCollapse: false,
        filterName: '',
    }, {
        name: '__REACT_HOOK_FORM_DEVTOOLS__',
        middleWares: [],
        storageType: window.localStorage,
    });
}
var DevTool = function (props) {
    var methods = reactHookForm.useFormContext();
    return (React__namespace.createElement(littleStateMachine.StateMachineProvider, null,
        React__namespace.createElement(DevToolUI, { control: (props && props.control) || methods.control, placement: props === null || props === void 0 ? void 0 : props.placement })));
};

exports.DevTool = DevTool;
//# sourceMappingURL=index.cjs.development.js.map
